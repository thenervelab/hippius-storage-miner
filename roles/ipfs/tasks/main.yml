---
- name: Download Kubo IPFS
  get_url:
    url: "{{ ipfs_download_url }}"
    dest: /tmp/kubo.tar.gz
    mode: '0755'
  become: yes

- name: Extract Kubo IPFS
  unarchive:
    src: /tmp/kubo.tar.gz
    dest: /tmp
    remote_src: yes
  become: yes

- name: Install Kubo IPFS
  command: bash /tmp/kubo/install.sh
  args:
    creates: /usr/local/bin/ipfs
  become: yes

- name: Create IPFS user
  user:
    name: "{{ ipfs_user }}"
    system: yes
    shell: /bin/false
    create_home: no
    home: "{{ ipfs_home }}"
  become: yes

# Auto-detect available unpartitioned disks if no disks are explicitly defined
- name: Auto-detect unpartitioned disks
  shell: |
    # Find disks without partitions, exclude boot disk and small disks
    BOOT_DISK=$(lsblk -ndo NAME,MOUNTPOINT | grep -E '/$|/boot' | head -1 | awk '{print $1}' | sed 's/[0-9]*$//')
    
    # Get all disk devices
    ALL_DISKS=$(lsblk -dn -o NAME,TYPE,SIZE,MODEL | grep 'disk' | awk '$1 !~ /^'$BOOT_DISK'/ && $3 ~ /G|T/' | awk '{print $1}')
    
    # Get all partitioned disks (parent devices)
    PARTITIONED_DISKS=$(lsblk -ln | grep -v disk | cut -d' ' -f1 | sed 's/[0-9]*$//' | sort -u)
    
    # Find disks without partitions
    for DISK in $ALL_DISKS; do
      PARTITIONED=0
      for PDISK in $PARTITIONED_DISKS; do
        if [ "$DISK" = "$PDISK" ]; then
          PARTITIONED=1
          break
        fi
      done
      
      if [ $PARTITIONED -eq 0 ]; then
        echo "/dev/$DISK"
      fi
    done
  register: auto_detected_disks
  changed_when: false
  become: yes
  when: zfs_disks is not defined or zfs_disks | length == 0
  tags:
    - ipfs-storage-max

# Set zfs_disks to auto-detected disks if not manually configured
- name: Use auto-detected disks if none configured
  set_fact:
    zfs_disks: "{{ auto_detected_disks.stdout_lines }}"
  when: (zfs_disks is not defined or zfs_disks | length == 0) and auto_detected_disks.stdout_lines | length > 0
  tags:
    - ipfs-storage-max

# Debug ZFS variables to understand disk configuration
- name: Debug ZFS variables
  debug:
    msg: "ZFS_DISKS is {% if zfs_disks is defined %}defined as {{ zfs_disks }} ({{ zfs_disks | length }} disks){% else %}not defined{% endif %}"
  tags: 
    - ipfs-storage-max

# Include ZFS setup tasks if disks are provided
- name: Include ZFS setup tasks
  include_tasks: zfs_setup.yml
  when: zfs_disks is defined and zfs_disks | length > 0

# The following task is conditionally executed if ZFS is not used
- name: Create IPFS directory (if not using ZFS)
  file:
    path: "{{ ipfs_data_dir }}"
    state: directory
    owner: "{{ ipfs_user }}"
    group: "{{ ipfs_group }}"
    mode: '0755'
  become: yes
  when: not (zfs_disks is defined and zfs_disks | length > 0)

# Check if ZFS pool exists after setup
- name: Check if IPFS ZFS pool exists
  shell: zpool list | grep -q "^ipfs " || echo "no_pool"
  register: ipfs_pool_exists
  failed_when: false
  changed_when: false
  become: yes
  tags: 
    - ipfs-storage-max

# Get ZFS pool size when using ZFS - after pool has been created
- name: Get ZFS pool size
  shell: zpool list -H -o size ipfs
  register: zfs_pool_size
  become: yes
  changed_when: false
  failed_when: false  # Don't fail if pool doesn't exist
  when: (zfs_disks is defined and zfs_disks | length > 0) or (ipfs_pool_exists.rc == 0)
  tags: 
    - ipfs-storage-max

- name: Initialize IPFS
  shell: |
    export IPFS_PATH="{{ ipfs_data_dir }}"
    if [ ! -f "$IPFS_PATH/config" ]; then
      ipfs init --profile=server
      ipfs config Addresses.API {{ ipfs_api_address }}
      ipfs config Addresses.Gateway {{ ipfs_gateway_address }}
    fi
  become: yes
  args:
    creates: "{{ ipfs_data_dir }}/config"

# Set IPFS StorageMax to ZFS pool size when using ZFS
- name: Set IPFS StorageMax to ZFS pool size
  shell: |
    export IPFS_PATH="{{ ipfs_data_dir }}"
    # Convert the ZFS size format (like 10G, 2T) to IPFS format (10GB, 2TB)
    SIZE_VALUE="{{ zfs_pool_size.stdout }}"
    SIZE_VALUE=$(echo $SIZE_VALUE | sed 's/G$/GB/;s/T$/TB/;s/P$/PB/;s/E$/EB/')
    ipfs config Datastore.StorageMax "$SIZE_VALUE"
  become: yes
  when: ((zfs_disks is defined and zfs_disks | length > 0) or (ipfs_pool_exists.rc == 0)) and zfs_pool_size.stdout is defined and zfs_pool_size.stdout != ""
  notify: Restart IPFS service
  tags: 
    - ipfs-storage-max

- name: Fix IPFS directory permissions
  file:
    path: "{{ ipfs_data_dir }}"
    owner: "{{ ipfs_user }}"
    group: "{{ ipfs_group }}"
    recurse: yes
    mode: '0755'
  become: yes

- name: Create IPFS systemd service
  template:
    src: ipfs.service.j2
    dest: /etc/systemd/system/ipfs.service
    mode: '0644'
  become: yes

- name: Reload systemd
  systemd:
    daemon_reload: yes
  become: yes

- name: Enable and start IPFS service
  systemd:
    name: ipfs
    state: started
    enabled: yes
  become: yes
