---
- name: Download Kubo IPFS
  get_url:
    url: "{{ ipfs_download_url }}"
    dest: /tmp/kubo.tar.gz
    mode: '0755'
  become: yes

- name: Extract Kubo IPFS
  unarchive:
    src: /tmp/kubo.tar.gz
    dest: /tmp
    remote_src: yes
  become: yes

- name: Install Kubo IPFS
  command: bash /tmp/kubo/install.sh
  args:
    creates: /usr/local/bin/ipfs
  become: yes

- name: Create IPFS user
  user:
    name: "{{ ipfs_user }}"
    system: yes
    shell: /bin/false
    create_home: no
    home: "{{ ipfs_home }}"
  become: yes

# Auto-detect available unpartitioned disks if no disks are explicitly defined
- name: Auto-detect unpartitioned disks
  shell: |
    # Simpler approach to find candidate disks
    # Look for disks with no children and size > 1TB (likely storage disks)
    lsblk -b -n -o NAME,TYPE,SIZE,MOUNTPOINT | grep -E ' disk ' | grep -v -E '(boot|efi|/$|/home|swap)' | \
    while read disk_line; do
      DISK_NAME=$(echo "$disk_line" | awk '{print $1}')
      DISK_SIZE=$(echo "$disk_line" | awk '{print $3}')
      
      # Check if disk has any partitions or children
      CHILDREN=$(lsblk -n -o NAME | grep -E "^${DISK_NAME}p?[0-9]+" | wc -l)
      
      # Only include disks with no children and size > 1TB (likely storage disks)
      if [ "$CHILDREN" -eq 0 ] && [ "$DISK_SIZE" -gt 1000000000000 ]; then
        echo "/dev/$DISK_NAME"
      fi
    done
    
    # Show debug information about all disks
    echo "===== DEBUG DISK INFO =====" >&2
    lsblk -o NAME,TYPE,SIZE,MOUNTPOINT >&2
    echo "===== END DEBUG =====" >&2
  register: auto_detected_disks
  changed_when: false
  become: yes
  when: zfs_disks is not defined or zfs_disks | length == 0
  tags:
    - ipfs-storage-max

# Set zfs_disks to auto-detected disks if not manually configured
- name: Use auto-detected disks if none configured
  set_fact:
    zfs_disks: "{{ auto_detected_disks.stdout_lines }}"
  when: (zfs_disks is not defined or zfs_disks | length == 0) and auto_detected_disks.stdout_lines | length > 0
  tags:
    - ipfs-storage-max

# Output detailed debug information
- name: Show detailed disk information
  debug:
    msg: 
      - "Auto-detected disks: {{ auto_detected_disks.stdout_lines | default([]) }}"
      - "Debug output: {{ auto_detected_disks.stderr_lines | default([]) }}"
      - "Final ZFS disks to use: {{ zfs_disks | default([]) }}"
  tags: 
    - ipfs-storage-max

# Include ZFS setup tasks if disks are provided
- name: Include ZFS setup tasks
  include_tasks: zfs_setup.yml
  when: zfs_disks is defined and zfs_disks | length > 0

# Check if ZFS pool exists after attempted setup
- name: Check if IPFS ZFS pool exists
  shell: zpool list | grep -q "^ipfs " || echo "no_pool"
  register: ipfs_pool_exists
  failed_when: false
  changed_when: false
  become: yes
  tags: 
    - ipfs-storage-max

# The following task is conditionally executed if ZFS setup was not successful
- name: Create IPFS directory (if ZFS setup was not successful)
  file:
    path: "{{ ipfs_data_dir }}"
    state: directory
    owner: "{{ ipfs_user }}"
    group: "{{ ipfs_group }}"
    mode: '0755'
  become: yes
  when: (zfs_disks is not defined or zfs_disks | length == 0) or ipfs_pool_exists.stdout == "no_pool"

# Get ZFS pool size when using ZFS - after pool has been created
- name: Get ZFS pool size
  shell: zpool list -H -o size ipfs
  register: zfs_pool_size
  become: yes
  changed_when: false
  failed_when: false  # Don't fail if pool doesn't exist
  when: ipfs_pool_exists.stdout != "no_pool"
  tags: 
    - ipfs-storage-max

- name: Initialize IPFS
  shell: |
    export IPFS_PATH="{{ ipfs_data_dir }}"
    if [ ! -f "$IPFS_PATH/config" ]; then
      ipfs init --profile=server
      ipfs config Addresses.API {{ ipfs_api_address }}
      ipfs config Addresses.Gateway {{ ipfs_gateway_address }}
    fi
  become: yes
  args:
    creates: "{{ ipfs_data_dir }}/config"

# Set IPFS StorageMax to ZFS pool size when using ZFS
- name: Set IPFS StorageMax to ZFS pool size
  shell: |
    export IPFS_PATH="{{ ipfs_data_dir }}"
    # Convert the ZFS size format (like 10G, 2T) to IPFS format (10GB, 2TB)
    SIZE_VALUE="{{ zfs_pool_size.stdout }}"
    SIZE_VALUE=$(echo $SIZE_VALUE | sed 's/G$/GB/;s/T$/TB/;s/P$/PB/;s/E$/EB/')
    ipfs config Datastore.StorageMax "$SIZE_VALUE"
  become: yes
  when: ((zfs_disks is defined and zfs_disks | length > 0) or (ipfs_pool_exists.rc == 0)) and zfs_pool_size.stdout is defined and zfs_pool_size.stdout != ""
  notify: Restart IPFS service
  tags: 
    - ipfs-storage-max

- name: Fix IPFS directory permissions
  file:
    path: "{{ ipfs_data_dir }}"
    owner: "{{ ipfs_user }}"
    group: "{{ ipfs_group }}"
    recurse: yes
    mode: '0755'
  become: yes

- name: Create IPFS systemd service
  template:
    src: ipfs.service.j2
    dest: /etc/systemd/system/ipfs.service
    mode: '0644'
  become: yes

- name: Reload systemd
  systemd:
    daemon_reload: yes
  become: yes

- name: Enable and start IPFS service
  systemd:
    name: ipfs
    state: started
    enabled: yes
  become: yes
